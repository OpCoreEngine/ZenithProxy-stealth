package com.zenith.mc.item.hashing;

import com.viaversion.nbt.io.MNBTIO;
import com.viaversion.nbt.tag.CompoundTag;
import com.viaversion.nbt.tag.ListTag;
import com.viaversion.nbt.tag.StringTag;
import com.zenith.mc.block.BlockRegistry;
import com.zenith.mc.item.ItemRegistry;
import com.zenith.mc.item.Rarity;
import com.zenith.mc.potion.PotionRegistry;
import it.unimi.dsi.fastutil.ints.Int2IntArrayMap;
import net.kyori.adventure.key.Key;
import net.kyori.adventure.text.Component;
import net.kyori.adventure.text.format.NamedTextColor;
import net.kyori.adventure.text.format.TextColor;
import net.kyori.adventure.text.format.TextDecoration;
import org.geysermc.mcprotocollib.protocol.data.game.entity.Effect;
import org.geysermc.mcprotocollib.protocol.data.game.entity.EquipmentSlot;
import org.geysermc.mcprotocollib.protocol.data.game.entity.metadata.GlobalPos;
import org.geysermc.mcprotocollib.protocol.data.game.item.ItemStack;
import org.geysermc.mcprotocollib.protocol.data.game.item.component.*;
import org.geysermc.mcprotocollib.protocol.data.game.level.sound.BuiltinSound;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

import java.util.HashMap;
import java.util.List;

public class ComponentHasherTest {
    @Test
    public void testHashing() {
        // Hashed values generated by vanilla Java

        CompoundTag customData = new CompoundTag();
        customData.putString("hello", "g'day");
        customData.putBoolean("nice?", false);
        customData.putByte("coolness", (byte) 100);
        CompoundTag customData2 = new CompoundTag();
        customData2.putString("is", "very cool");
        customData.put("geyser", customData2);
        ListTag customDataList = new ListTag<>(ListTag.class);
        ListTag<StringTag> customDataList2 = new ListTag<>(StringTag.class);
        customDataList2.add(new StringTag("in a list"));
        customDataList.add(customDataList2);
        customData.put("a list", customDataList);

        testHash(DataComponentTypes.CUSTOM_DATA, MNBTIO.write(customData, false), -385053299);

        testHash(DataComponentTypes.MAX_STACK_SIZE, 64, 733160003);
        testHash(DataComponentTypes.MAX_DAMAGE, 13, -801733367);
        testHash(DataComponentTypes.DAMAGE, 459, 1211405277);
        testHash(DataComponentTypes.UNBREAKABLE, Unit.INSTANCE, -982207288);

        testHash(DataComponentTypes.CUSTOM_NAME, Component.text("simple component test!"), 950545066);
        testHash(DataComponentTypes.CUSTOM_NAME, Component.translatable("a.translatable"), 1983484873);
        testHash(DataComponentTypes.CUSTOM_NAME, Component.text("component with *style*")
            .style(style -> style.color(NamedTextColor.RED).decorate(TextDecoration.ITALIC)), -886479206);
        testHash(DataComponentTypes.CUSTOM_NAME, Component.text("component with more stuff")
            .children(List.of(Component.translatable("a.translate.string", "fallback!")
                                  .style(style -> style.color(TextColor.color(0x446688)).decorate(TextDecoration.BOLD)))), -1591253390);

        testHash(DataComponentTypes.ITEM_MODEL, "testing", -689946239);

        testHash(DataComponentTypes.RARITY, Rarity.COMMON.ordinal(), 75150990);
        testHash(DataComponentTypes.RARITY, Rarity.RARE.ordinal(), -1420566726);
        testHash(DataComponentTypes.RARITY, Rarity.EPIC.ordinal(), -292715907);

        var enchantsMap = new Int2IntArrayMap();
        enchantsMap.put(0, 1);
//        testHash(DataComponentTypes.ENCHANTMENTS, ItemEnchantments.builder().enchantments(enchantsMap).build(), 0); // TODO identifier lookup

        // todo: broken because we don't store namespaced keys in zenith's hashers, assumes all are "minecraft:"
//        testHash(DataComponentTypes.ATTRIBUTE_MODIFIERS,
//            ItemAttributeModifiers.builder()
//                .modifiers(List.of(
//                    ItemAttributeModifiers.Entry.builder()
//                        .attribute(AttributeType.Builtin.ATTACK_DAMAGE.getId())
//                        .modifier(ItemAttributeModifiers.AttributeModifier.builder()
//                            .id("test_modifier_1")
//                            .amount(2.0)
//                            .operation(ModifierOperation.ADD)
//                            .build())
//                        .slot(ItemAttributeModifiers.EquipmentSlotGroup.ANY)
//                        .display(new ItemAttributeModifiers.Display(ItemAttributeModifiers.DisplayType.DEFAULT, null))
//                        .build(),
//                    ItemAttributeModifiers.Entry.builder()
//                        .attribute(AttributeType.Builtin.JUMP_STRENGTH.getId())
//                        .modifier(ItemAttributeModifiers.AttributeModifier.builder()
//                            .id("test_modifier_2")
//                            .amount(4.2)
//                            .operation(ModifierOperation.ADD_MULTIPLIED_TOTAL)
//                            .build())
//                        .slot(ItemAttributeModifiers.EquipmentSlotGroup.HEAD)
//                        .display(new ItemAttributeModifiers.Display(ItemAttributeModifiers.DisplayType.HIDDEN, null))
//                        .build(),
//                    ItemAttributeModifiers.Entry.builder()
//                        .attribute(AttributeType.Builtin.WAYPOINT_RECEIVE_RANGE.getId())
//                        .modifier(ItemAttributeModifiers.AttributeModifier.builder()
//                            .id("geyser_mc:test_modifier_3")
//                            .amount(5.4)
//                            .operation(ModifierOperation.ADD_MULTIPLIED_BASE)
//                            .build())
//                        .slot(ItemAttributeModifiers.EquipmentSlotGroup.FEET)
//                        .display(new ItemAttributeModifiers.Display(ItemAttributeModifiers.DisplayType.DEFAULT, null))
//                        .build()
//                ))
//                .build()
//            , 1889444548);
//
//        testHash(DataComponentTypes.ATTRIBUTE_MODIFIERS,
//            ItemAttributeModifiers.builder()
//                .modifiers(List.of(
//                    ItemAttributeModifiers.Entry.builder()
//                        .attribute(AttributeType.Builtin.WAYPOINT_TRANSMIT_RANGE.getId())
//                        .modifier(ItemAttributeModifiers.AttributeModifier.builder()
//                            .id("geyser_mc:test_modifier_4")
//                            .amount(2.0)
//                            .operation(ModifierOperation.ADD)
//                            .build())
//                        .slot(ItemAttributeModifiers.EquipmentSlotGroup.ANY)
//                        .display(new ItemAttributeModifiers.Display(ItemAttributeModifiers.DisplayType.OVERRIDE, Component.text("give me a test")))
//                        .build()
//                ))
//                .build()
//            , 1375953017);

        testHash(DataComponentTypes.CUSTOM_MODEL_DATA,
                 new CustomModelData(List.of(5.0F, 3.0F, -1.0F), List.of(false, true, false), List.of("1", "3", "2"), List.of(3424, -123, 345)), 1947635619);

        testHash(DataComponentTypes.CUSTOM_MODEL_DATA,
                 new CustomModelData(List.of(5.03F, 3.0F, -1.11F), List.of(true, true, false), List.of("2", "5", "7"), List.of()), -512419908);

        testHash(DataComponentTypes.TOOLTIP_DISPLAY, new TooltipDisplay(false, List.of(DataComponentTypes.CONSUMABLE, DataComponentTypes.DAMAGE)), -816418453);
        testHash(DataComponentTypes.TOOLTIP_DISPLAY, new TooltipDisplay(true, List.of()), 14016722);
        testHash(DataComponentTypes.TOOLTIP_DISPLAY, new TooltipDisplay(false, List.of()), -982207288);

        testHash(DataComponentTypes.ENCHANTMENT_GLINT_OVERRIDE, true, -1019818302);
        testHash(DataComponentTypes.ENCHANTMENT_GLINT_OVERRIDE, false, 828198337);

        testHash(DataComponentTypes.FOOD, FoodProperties.builder().nutrition(5).saturationModifier(1.4F).canAlwaysEat(false).build(), 445786378);
        testHash(DataComponentTypes.FOOD, FoodProperties.builder().nutrition(3).saturationModifier(5.7F).canAlwaysEat(true).build(), 1917653498);
        testHash(DataComponentTypes.FOOD, FoodProperties.builder().nutrition(7).saturationModifier(0.15f).canAlwaysEat(false).build(), -184166204);

        testHash(DataComponentTypes.CONSUMABLE, new Consumable(2.0F, Consumable.ItemUseAnimation.EAT,
                                                                        BuiltinSound.ITEM_OMINOUS_BOTTLE_DISPOSE, true,
                                                                        List.of(new ConsumeEffect.RemoveEffects(new HolderSet(new int[]{Effect.BAD_OMEN.ordinal(), Effect.REGENERATION.ordinal()})),
                                                                                new ConsumeEffect.TeleportRandomly(3.0F))), 1742669333);

        testHash(DataComponentTypes.USE_REMAINDER, new ItemStack(ItemRegistry.MELON.id(), 52), -1279684916);

        DataComponents specialComponents = new DataComponents(new HashMap<>());
        specialComponents.put(DataComponentTypes.ITEM_MODEL, "testing");
        specialComponents.put(DataComponentTypes.MAX_STACK_SIZE, 44);
        testHash(DataComponentTypes.USE_REMAINDER, new ItemStack(ItemRegistry.PUMPKIN.id(), 32, specialComponents), 1991032843);

        testHash(DataComponentTypes.DAMAGE_RESISTANT, "testing", -1230493835);

        testHash(DataComponentTypes.TOOL, ToolData.builder().rules(List.of()).defaultMiningSpeed(5.0F).damagePerBlock(3).canDestroyBlocksInCreative(false).build(), -1789071928);
        testHash(DataComponentTypes.TOOL, ToolData.builder().rules(List.of()).defaultMiningSpeed(3.0f).damagePerBlock(1).canDestroyBlocksInCreative(true).build(), -7422944);

        testHash(DataComponentTypes.TOOL,
                 ToolData.builder()
                     .rules(List.of(
                         ToolData.Rule.builder().blocks(new HolderSet("acacia_logs")).build(),
                         ToolData.Rule.builder().blocks(new HolderSet(new int[]{BlockRegistry.JACK_O_LANTERN.id(), BlockRegistry.WALL_TORCH.id()})).speed(4.2F).correctForDrops(true).build(),
                         ToolData.Rule.builder().blocks(new HolderSet(new int[]{BlockRegistry.PUMPKIN.id()})).speed(7.0F).correctForDrops(false).build()))
                     .defaultMiningSpeed(1.0f)
                     .damagePerBlock(1)
                     .canDestroyBlocksInCreative(true)
                     .build(),
                 2103678261);

        testHash(DataComponentTypes.WEAPON, new Weapon(5, 2.0F), -154556976);
        testHash(DataComponentTypes.WEAPON, new Weapon(1, 7.3F), 885347995);

        testHash(DataComponentTypes.ENCHANTABLE, 3, -1834983819);

        testHash(DataComponentTypes.EQUIPPABLE, new Equippable(EquipmentSlot.BODY, BuiltinSound.ITEM_ARMOR_EQUIP_GENERIC, null, null, null,
            true, true, true, false,
            false, BuiltinSound.ITEM_SHEARS_SNIP), 1294431019);
        testHash(DataComponentTypes.EQUIPPABLE, new Equippable(EquipmentSlot.BODY, BuiltinSound.ITEM_ARMOR_EQUIP_CHAIN, "testing", null, null,
            true, true, true, false,
            true, BuiltinSound.ITEM_BONE_MEAL_USE), -801616214);
        // todo: broken for some reason
//        testHash(DataComponentTypes.EQUIPPABLE, new Equippable(EquipmentSlot.BODY, BuiltinSound.AMBIENT_CAVE, null, null, null,
//            false, true, false, false,
//            false, new CustomSound("testing_equippable", false, 10.0F)), -1145684769);
//        testHash(DataComponentTypes.EQUIPPABLE, new Equippable(EquipmentSlot.BODY, BuiltinSound.ENTITY_BREEZE_WIND_BURST, null, "testing",
//            new HolderSet(new int[]{EntityType.ACACIA_BOAT.ordinal()}), false, true, false, false,
//            true, BuiltinSound.BLOCK_NETHERITE_BLOCK_PLACE), -115079770);
        testHash(DataComponentTypes.EQUIPPABLE, new Equippable(EquipmentSlot.HELMET, BuiltinSound.ITEM_ARMOR_EQUIP_GENERIC, null, null, null,
            true, true, true, false,
            false, BuiltinSound.ITEM_SHEARS_SNIP), 497790992);
        testHash(DataComponentTypes.EQUIPPABLE, new Equippable(EquipmentSlot.HELMET, BuiltinSound.ITEM_ARMOR_EQUIP_GENERIC, null, null,
            new HolderSet("aquatic"),
            true, true, true, false,
            false, BuiltinSound.ITEM_SHEARS_SNIP), 264760955);

        testHash(DataComponentTypes.REPAIRABLE, new HolderSet(new int[]{ItemRegistry.AMETHYST_BLOCK.id(), ItemRegistry.PUMPKIN.id()}), -36715567);

        CompoundTag mapDecorations = new CompoundTag();
        CompoundTag inner = new CompoundTag();
        inner.putString("type", "minecraft:player");
        inner.putDouble("x", 45.0);
        inner.putDouble("z", 67.4);
        inner.putFloat("rotation", 39.5F);
        mapDecorations.put("test_decoration", inner);

        testHash(DataComponentTypes.MAP_DECORATIONS, MNBTIO.write(mapDecorations, false), -625782954);

        ItemStack bundleStack1 = new ItemStack(ItemRegistry.PUMPKIN.id());
        ItemStack bundleStack2 = new ItemStack(ItemRegistry.MELON.id(), 24);

        DataComponents bundleStackComponents = new DataComponents(new HashMap<>());
        bundleStackComponents.put(DataComponentTypes.CUSTOM_NAME, Component.text("magic potato!"));

        ItemStack bundleStack3 = new ItemStack(ItemRegistry.POTATO.id(), 30, bundleStackComponents);
        testHash(DataComponentTypes.BUNDLE_CONTENTS, List.of(bundleStack1, bundleStack2, bundleStack3), 1817891504);

        testHash(DataComponentTypes.POTION_CONTENTS, PotionContents.builder().potionId(PotionRegistry.FIRE_RESISTANCE.id()).customColor(-1).customEffects(List.of()).customName(null).build(), -772576502);
        testHash(DataComponentTypes.POTION_CONTENTS, PotionContents.builder()
                     .potionId(-1)
                     .customColor(20)
                     .customEffects(List.of(MobEffectInstance.builder()
                                                .effect(Effect.CONDUIT_POWER)
                                                .details(MobEffectDetails.builder()
                                                             .amplifier(0)
                                                             .duration(0)
                                                             .ambient(false)
                                                             .showParticles(true)
                                                             .showIcon(true)
                                                             .hiddenEffect(null)
                                                             .build())
                                                .build()))
                     .build(),
                 -902075187);
        testHash(DataComponentTypes.POTION_CONTENTS, PotionContents.builder()
                     .potionId(-1)
                     .customColor(96)
                     .customEffects(List.of(MobEffectInstance.builder()
                                                .effect(Effect.JUMP_BOOST)
                                                .details(MobEffectDetails.builder()
                                                             .amplifier(57)
                                                             .duration(17)
                                                             .ambient(true)
                                                             .showParticles(false)
                                                             .showIcon(false)
                                                             .hiddenEffect(null)
                                                             .build())
                                                .build()))
                     .build(),
                 -17231244);
        testHash(DataComponentTypes.POTION_CONTENTS, PotionContents.builder()
                     .potionId(-1)
                     .customColor(87)
                     .customEffects(List.of(MobEffectInstance.builder()
                                                .effect(Effect.SPEED)
                                                .details(MobEffectDetails.builder()
                                                             .amplifier(29)
                                                             .duration(1004)
                                                             .ambient(false)
                                                             .showParticles(true)
                                                             .showIcon(true)
                                                             .hiddenEffect(null)
                                                             .build())
                                                .build()))
                     .customName("testing")
                     .build(),
                 2007296036);

        // TODO testing trim, instrument, trim material, jukebox playable requires registries

        testHash(DataComponentTypes.LODESTONE_TRACKER,
                 new LodestoneTracker(new GlobalPos(Key.key("overworld"), 5, 6, 7), true), 63561894);
        testHash(DataComponentTypes.LODESTONE_TRACKER,
                 new LodestoneTracker(null, false), 1595667667);
    }

    private static <T> void testHash(DataComponentType<T> component, T value, int expected) {
        int got = DataComponentHashers.hash(component, value).asInt();
        Assertions.assertEquals(expected, got, "Hash mismatch for " + component + " with value " + value + " - expected " + expected + ", got " + got);
    }
}
